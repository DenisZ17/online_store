Запуск сервер -- npm run dev

1. Создаем корневую папку, а в ней 2 папки client и сервер
2. В терминале набираем --- cd server
    - чтобы перейти в данную папку
3. Вводим команду в терминале --- npm init -y
    - чтобы проинициализировать ее
4. Установим зависимости:
    - Установим Express - это фреймворк для написания бэкенда серверной части на Node.js
    - Установим систему управления базами данных Postgresql и устанавливаем его модули pg и pg-hstore
    - Устанавливаем sequelize - это технология которая позволяет связывать программный код с БД через функции
    - Устанавливаем cors - это чтобы мы могли обращаться с нашего браузера на сервер
    - Устанавливаем dotenv - чтобы задавать переменные окружения  
    --- npm install express pg pg-hstore sequelize cors dotenv
5. Установим nodemon - чтобы автоматическить перезапускать сервер --- npm install -D nodemon
    - В файле package.json запишем скрипт, который будет запускать приложение в режиме разработки: для этого в поле scripts пишем команду "dev": "nodemon index.js"
6. Специальный пакет для img файлов -- npm i express-fileupload
7. Пакет для генерации уникального ключа -- npm i uuid
8. Модуль path чтобы установить путь есть в node.js --- 43.30
9. Модуль для генерации jwt токена и модуль для хэширования паролей (чтобы не хранить их в базе данных в открытом виде) -- npm i jsonwebtoken bcrypt 

----FRONTEND-----
1. Разворачиваем реакт приложение при помощи утилиты --- npx create-react-app .
2. Установим определенные зависимости:
- Нам понадобится axios чтобы отправлять запросы на сервер 
- React router dom для постраничной навигации
- Mobx - это state менеджер
- Mobx react lite - это чтобы связать mobx с функциональными компонентами react
--- npm i axios react-router-dom mobx mobx-react-lite
3. Установим bootstrap
--- npm install react-bootstrap bootstrap@5.1.3
4. Запуск приложения
--- npm start


Комментарии по FRONTEND
1. Создадим папки которые нам понадобятся
    а. Первая папка 'store' там мы будем взаимодействовать с mobx и хранить какие-то данные
    b. Second directory 'pages' there будут корневые компоненты, которые будут являться страницами
    c. Third directory 'components' здесь будут всякие navbar и все в таком духе
2. И сразу же создадим в папке pages страницы
    * Auth.js - это будет авторизация
    * Shop.js - это будет основная страница
    * DevicePage.js - карточка девайса
    * Admin.js - это будет админ панель, где администратор сможет добавлять типы, бренды, устройства и т.д.
3. В папке components создадим новый component AppRouter, для навигации по созданным страницам 
4. Файл routes.js - здесь будут описаны все маршруты к конкретным страницам, которые есть в нашем приложении
5. Создадим папку utils, а в ней файл consts.js с константами

